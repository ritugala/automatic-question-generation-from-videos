Let's look at an example with some animation
to put all the pieces together. In all
these examples assume node 0 is always
the starting node, although any node is
perfectly fine. In red is the
distance array and I will be using it to
track the optimal distance from the
start node to every node in the graph. In
the beginning the distance to every
node is initialized to have the value of
positive infinity, since we assume that every node is
unreachable. If at the end of the
algorithm there's still a value of
infinity at a certain index, then we know
that that node is unreachable. On the
right, I will be maintaining key value
pairs corresponding to a nodes index and
the best distance to get to that node.
This priority queue will tell us which
node we should visit next, based on which
key value pair has the lowest value.
Internally, priority queues are usually
implemented as heaps but I'm not going
to show that visualization here. To start
with assign a distance of 0 to the
start nodes index, which is index 0. In
the distance array also insert the key
value pair 0, 0 into the priority
queue, to indicate that we intend on
visiting node 0 with a best distance of
0. Then the algorithm actually starts, and
we look inside the priority queue for
the first time and we discover that we
should visit node 0. From node 0 we can
visit node 1 by using the edge with a
cost of 4. This gives us a best distance
of 4, so we can update the best distance
from infinity to 4 in the distance array.
Also add this information to the priority
queue. Next we can visit node 2 from node
0. Just like the last node, we can update
the optimal distance to reach node 2
from infinity to 1. Additionally, note that
node 2 is reachable with a distance of 1
to the priority queue. So that concludes
visiting all the edges for node 0. To
decide which node we should visit
next, remember that Dijkstra's always selects the next most
promising node in the priority queue. To
do this, simply pull the next best key
value pair from the priority queue. Node
2 is the next most promising node
because it has a distance of 1 from the
start node while node 2 one has a greater
value of 4. If we take the upwards edge, we can improve the best
distance to node 1 by taking the current
best distance from node 2, which is 1,
plus the edge cost of 2 to get to node 1
for a total cost of 3. This is better
than the previous value of 4. For each
time that we find a better distance like this
we insert that information into the
priority queue.
Then we improve the best distance to
node3 which is six. The next most promising
node is node1. We can improve the best
distance to node 3 by taking the edge
from node 1 to node 3 with a cost of 1.
The next most promising node is node 1
with value 4, but we have already found a
better route to get to node 1, since the
dist array at index 1 has a value of 3.
Therefore we can ignore this entry in
the priority queue. Having these
duplicate key entries in the priority
queue is what constitutes to making this
implementation of Dijkstra's the lazy
implementation, because we lazily delete
outdated key value pairs. Next up is node
3. We update the best distance of node 4 to
be 7. We already found a better route to
node 3 so we skip this entry in the priority
queue. Finally we visit node 4. And that's
all for the lazy implementation of
Dijkstra's. There are only a few moving
parts but in large the only things to
really keep track of is the distance
array which contains the best distance
so far from the start node to every
other node and the priority queue which
tells us which node we should visit next
based on the best value found so far.